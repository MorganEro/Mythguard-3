generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Cart {
  id             String     @id @default(uuid())
  clerkId        String
  numItemsInCart Int        @default(0)
  cartTotal      Int        @default(0)
  shipping       Int        @default(5)
  tax            Int        @default(0)
  taxRate        Float      @default(0.1)
  orderTotal     Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  cartItems      CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Contract {
  id          String   @id @default(uuid())
  name      String
  description String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clerkId     String
  guardianId  String
  programId   String

  guardian    Guardian @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(uuid())
  name        String
  shortDescription String
  description String
  locationArea String
  image String
  locationId  String
  eventDate   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  guardians   Guardian[]

  location  Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id @default(uuid())
  productId String
  clerkId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Guardian {
  id               String     @id @default(uuid())
  name             String
  description      String
  shortDescription String
  image            String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  likes            Like[]
  contracts        Contract[]
  programs         Program[]
  reviews          Review[]
  events           Event[]
}

model Like {
  id        String   @id @default(uuid())
  clerkId   String
  guardianId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guardian   Guardian @relation(fields: [guardianId], references: [id], onDelete: Cascade)
}

model Location {
  id               String   @id @default(uuid())
  name             String
  subtitle         String
  shortDescription String
  description      String
  address          String
  image            String
  mapIcon          String   @default("/map-pin.svg")
  lat              Float
  lng              Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  events           Event[]
}

model Order {
  id         String   @id @default(uuid())
  clerkId    String
  products   Int      @default(0)
  orderTotal Int      @default(0)
  tax        Int      @default(0)
  taxRate    Float    @default(0.1)
  shipping   Int      @default(0)
  email      String
  isPaid     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Product {
  id          String     @id @default(uuid())
  name        String
  company     String
  description String
  featured    Boolean
  image       String
  price       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  clerkId     String
  favorites   Favorite[]
  reviews     Review[]
  cartItems   CartItem[]
}

model Program {
  id          String     @id @default(uuid())
  name        String
  description String
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  guardians   Guardian[]
  contracts   Contract[]
  reviews     Review[]
}

model Review {
  id             String   @id @default(uuid())
  productId      String?
  guardianId     String?
  programId      String?
  clerkId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  rating         Int
  comment        String
  authorName     String
  authorImageUrl String

  product  Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  guardian Guardian? @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  program  Program?  @relation(fields: [programId], references: [id], onDelete: Cascade)
}
